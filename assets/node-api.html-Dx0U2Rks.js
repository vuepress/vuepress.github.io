import{_ as t,c as r,b as l,a as o,d as n,e,w as p,r as i,o as d}from"./app-HXhn31Iy.js";const c={};function u(D,s){const a=i("RouteLink");return d(),r("div",null,[s[84]||(s[84]=l("h1",{id:"node-api",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#node-api"},[l("span",null,"Node API")])],-1)),s[85]||(s[85]=l("p",null,[n("Node API 可以通过 "),l("code",null,"vuepress/core"),n(" 来引入。")],-1)),s[86]||(s[86]=l("h2",{id:"app",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#app"},[l("span",null,"App")])],-1)),l("p",null,[e(a,{to:"/zh/reference/plugin-api.html"},{default:p(()=>s[0]||(s[0]=[n("插件 API",-1)])),_:1,__:[0]}),s[1]||(s[1]=n(" 的所有 Hooks 中都可以获取到 App 实例。",-1))]),s[87]||(s[87]=o(`<p><code>BuildApp</code> 和 <code>DevApp</code> 除了 <a href="#build">build</a> 和 <a href="#dev">dev</a> 方法外，拥有一样的属性和方法。</p><h3 id="createbuildapp" tabindex="-1"><a class="header-anchor" href="#createbuildapp"><span>createBuildApp</span></a></h3><ul><li>函数签名：</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> createBuildApp</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">config</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">AppConfig</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> BuildApp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>参数：</li></ul><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>config</td><td><code>AppConfig</code></td><td>创建 VuePress App 的选项。</td></tr></tbody></table><ul><li><p>详情：</p><p>创建一个 Build 模式的 App 实例，用于构建静态文件。</p></li><li><p>示例：</p></li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> build</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> app</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createBuildApp</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#6A9955;">    // ...配置项</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // 初始化和准备</span></span>
<span class="line"><span style="color:#C586C0;">  await</span><span style="color:#9CDCFE;"> app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">init</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">  await</span><span style="color:#9CDCFE;"> app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">prepare</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // 构建</span></span>
<span class="line"><span style="color:#C586C0;">  await</span><span style="color:#9CDCFE;"> app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">build</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // 处理 onGenerated hook</span></span>
<span class="line"><span style="color:#C586C0;">  await</span><span style="color:#9CDCFE;"> app</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pluginApi</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">hooks</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">onGenerated</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">process</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参考： <ul><li><a href="#build">Node API &gt; App 方法 &gt; build</a></li></ul></li></ul><h3 id="createdevapp" tabindex="-1"><a class="header-anchor" href="#createdevapp"><span>createDevApp</span></a></h3><ul><li>函数签名：</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> createDevApp</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">config</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">AppConfig</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> DevApp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>参数：</li></ul><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>config</td><td><code>AppConfig</code></td><td>创建 VuePress App 的选项。</td></tr></tbody></table><ul><li><p>详情：</p><p>创建一个 Dev 模式的 App 实例，用于启动开发服务器。</p></li><li><p>示例：</p></li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> dev</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> app</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createDevApp</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#6A9955;">    // ...配置项</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // 初始化和准备</span></span>
<span class="line"><span style="color:#C586C0;">  await</span><span style="color:#9CDCFE;"> app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">init</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">  await</span><span style="color:#9CDCFE;"> app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">prepare</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // 启动开发服务器</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> closeDevServer</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">dev</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // 准备文件监听器</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> watchers</span><span style="color:#D4D4D4;"> = []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // 重启开发服务器</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> restart</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    await</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">all</span><span style="color:#D4D4D4;">([</span></span>
<span class="line"><span style="color:#6A9955;">      // 关闭所有监听器</span></span>
<span class="line"><span style="color:#D4D4D4;">      ...</span><span style="color:#9CDCFE;">watchers</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> item</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">close</span><span style="color:#D4D4D4;">()),</span></span>
<span class="line"><span style="color:#6A9955;">      // 关闭当前的开发服务器</span></span>
<span class="line"><span style="color:#DCDCAA;">      closeDevServer</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">    ])</span></span>
<span class="line"><span style="color:#C586C0;">    await</span><span style="color:#DCDCAA;"> dev</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // 处理 onWatched hook</span></span>
<span class="line"><span style="color:#C586C0;">  await</span><span style="color:#9CDCFE;"> app</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pluginApi</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">hooks</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">onWatched</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">process</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">watchers</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">restart</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参考： <ul><li><a href="#dev">Node API &gt; App 方法 &gt; dev</a></li></ul></li></ul><h2 id="app-属性" tabindex="-1"><a class="header-anchor" href="#app-属性"><span>App 属性</span></a></h2><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>options</span></a></h3><ul><li><p>类型： <code>AppOptions</code></p></li><li><p>详情：</p><p>VuePress App 的配置项。</p><p>这些配置项来自于 <a href="#createbuildapp">createBuildApp</a> / <a href="#createdevapp">createDevApp</a> 的 <code>config</code> 参数，但所有可选的字段都填充上了默认值。</p></li></ul><h3 id="sitedata" tabindex="-1"><a class="header-anchor" href="#sitedata"><span>siteData</span></a></h3>`,21)),l("ul",null,[s[6]||(s[6]=l("li",null,[l("p",null,[n("类型： "),l("code",null,"SiteData")])],-1)),l("li",null,[s[5]||(s[5]=l("p",null,"详情：",-1)),l("p",null,[s[3]||(s[3]=n("由用户设置的站点数据，包含所有的 ",-1)),e(a,{to:"/zh/reference/config.html#%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE"},{default:p(()=>s[2]||(s[2]=[n("站点配置",-1)])),_:1,__:[2]}),s[4]||(s[4]=n(" ，可以在客户端代码中使用。",-1))])])]),s[88]||(s[88]=o('<h3 id="version" tabindex="-1"><a class="header-anchor" href="#version"><span>version</span></a></h3><ul><li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>VuePress App 的版本，即 <code>@vuepress/core</code> 包的版本。</p></li></ul><h3 id="env-isbuild" tabindex="-1"><a class="header-anchor" href="#env-isbuild"><span>env.isBuild</span></a></h3><ul><li><p>类型： <code>boolean</code></p></li><li><p>详情：</p><p>用于判断 App 是否运行在 Build 模式的环境标记，即当前 App 是否是 <a href="#createbuildapp">BuildApp</a> 实例。</p></li></ul><h3 id="env-isdev" tabindex="-1"><a class="header-anchor" href="#env-isdev"><span>env.isDev</span></a></h3><ul><li><p>类型： <code>boolean</code></p></li><li><p>详情：</p><p>用于判断 App 是否运行在 Dev 模式的环境标记，即当前 App 是否是 <a href="#createdevapp">DevApp</a> 实例。</p></li></ul><h3 id="env-isdebug" tabindex="-1"><a class="header-anchor" href="#env-isdebug"><span>env.isDebug</span></a></h3><ul><li><p>类型： <code>boolean</code></p></li><li><p>详情：</p><p>用于判断 App 是否开启 Debug 模式的环境标记。</p></li></ul><h3 id="markdown" tabindex="-1"><a class="header-anchor" href="#markdown"><span>markdown</span></a></h3>',9)),l("ul",null,[s[12]||(s[12]=l("li",null,[l("p",null,[n("类型： "),l("code",null,"MarkdownIt")])],-1)),l("li",null,[s[10]||(s[10]=l("p",null,"详情：",-1)),s[11]||(s[11]=l("p",null,[n("用于解析 Markdown 内容的 "),l("a",{href:"https://github.com/markdown-it/markdown-it",target:"_blank",rel:"noopener noreferrer"},"markdown-it"),n(" 实例。")],-1)),l("p",null,[s[8]||(s[8]=n("它仅在 ",-1)),e(a,{to:"/zh/reference/plugin-api.html#oninitialized"},{default:p(()=>s[7]||(s[7]=[n("onInitialized",-1)])),_:1,__:[7]}),s[9]||(s[9]=n(" 以及之后的 Hooks 中才可用。",-1))])])]),s[89]||(s[89]=l("h3",{id:"pages",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#pages"},[l("span",null,"pages")])],-1)),l("ul",null,[s[18]||(s[18]=l("li",null,[l("p",null,[n("类型： "),l("code",null,"Page[]")])],-1)),l("li",null,[s[16]||(s[16]=l("p",null,"详情：",-1)),s[17]||(s[17]=l("p",null,[l("a",{href:"#page"},"Page"),n(" 对象数组。")],-1)),l("p",null,[s[14]||(s[14]=n("它仅在 ",-1)),e(a,{to:"/zh/reference/plugin-api.html#oninitialized"},{default:p(()=>s[13]||(s[13]=[n("onInitialized",-1)])),_:1,__:[13]}),s[15]||(s[15]=n(" 以及之后的 Hooks 中才可用。",-1))])])]),s[90]||(s[90]=o(`<h2 id="app-方法" tabindex="-1"><a class="header-anchor" href="#app-方法"><span>App 方法</span></a></h2><h3 id="dir" tabindex="-1"><a class="header-anchor" href="#dir"><span>dir</span></a></h3><ul><li><p>工具函数：</p><ul><li><code>dir.cache()</code>： 解析至缓存目录</li><li><code>dir.temp()</code>： 解析至临时文件目录</li><li><code>dir.source()</code>： 解析至源文件目录</li><li><code>dir.dest()</code>： 解析至输出目录</li><li><code>dir.client()</code>： 解析至 <code>@vuepress/client</code> 目录</li><li><code>dir.public()</code>： 解析至 Public 文件目录</li></ul></li><li><p>函数签名：</p></li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> AppDirFunction</span><span style="color:#D4D4D4;"> = (...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">[]) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> string</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>详情：</p><p>用于解析对应目录下的文件绝对路径的一些工具函数。</p><p>如果你不传入任何参数，就会返回对应目录的绝对路径。</p></li><li><p>示例：</p></li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#6A9955;">// 解析 \`\${sourceDir}/README.md\` 文件的绝对路径</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> homeSourceFile</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">dir</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">source</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;README.md&#39;</span><span style="color:#D4D4D4;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="writetemp" tabindex="-1"><a class="header-anchor" href="#writetemp"><span>writeTemp</span></a></h3><ul><li>函数签名：</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">declare</span><span style="color:#569CD6;"> const</span><span style="color:#DCDCAA;"> writeTemp</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">file</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">content</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>参数：</li></ul><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>file</td><td><code>string</code></td><td>要写入的临时文件的路径，相对于临时文件目录。</td></tr><tr><td>content</td><td><code>string</code></td><td>要写入的临时文件路径的内容。</td></tr></tbody></table><ul><li><p>详情：</p><p>用于写入临时文件的方法。</p><p>写入的文件可以在客户端文件中通过 <code>@temp</code> 别名来引入。</p></li><li><p>示例：</p></li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">  // 在 onPrepared hook 中写入临时文件</span></span>
<span class="line"><span style="color:#569CD6;">  async</span><span style="color:#DCDCAA;"> onPrepared</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#C586C0;">    await</span><span style="color:#9CDCFE;"> app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">writeTemp</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;foo.js&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;export const foo = &#39;bar&#39;&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#6A9955;">// 在客户端文件中引入临时文件</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@temp/foo&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="init" tabindex="-1"><a class="header-anchor" href="#init"><span>init</span></a></h3><ul><li>函数签名：</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">declare</span><span style="color:#569CD6;"> const</span><span style="color:#DCDCAA;"> init</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">void</span><span style="color:#D4D4D4;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,17)),l("ul",null,[s[21]||(s[21]=l("li",null,[l("p",null,"详情："),l("p",null,"初始化 VuePress App 。")],-1)),l("li",null,[s[20]||(s[20]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/advanced/architecture.html#%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B%E4%B8%8E-hooks"},{default:p(()=>s[19]||(s[19]=[n("深入 > 架构 > 核心流程与 Hooks",-1)])),_:1,__:[19]})])])])]),s[91]||(s[91]=o('<h3 id="prepare" tabindex="-1"><a class="header-anchor" href="#prepare"><span>prepare</span></a></h3><ul><li>函数签名：</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">declare</span><span style="color:#569CD6;"> const</span><span style="color:#DCDCAA;"> prepare</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">void</span><span style="color:#D4D4D4;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',3)),l("ul",null,[s[24]||(s[24]=l("li",null,[l("p",null,"详情："),l("p",null,"准备客户端临时文件。")],-1)),l("li",null,[s[23]||(s[23]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/advanced/architecture.html#%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B%E4%B8%8E-hooks"},{default:p(()=>s[22]||(s[22]=[n("深入 > 架构 > 核心流程与 Hooks",-1)])),_:1,__:[22]})])])])]),s[92]||(s[92]=o('<h3 id="build" tabindex="-1"><a class="header-anchor" href="#build"><span>build</span></a></h3><ul><li>函数签名：</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">declare</span><span style="color:#569CD6;"> const</span><span style="color:#DCDCAA;"> build</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">void</span><span style="color:#D4D4D4;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',3)),l("ul",null,[s[27]||(s[27]=l("li",null,[l("p",null,"详情："),l("p",null,"生成静态站点文件。"),l("p",null,[n("该方法仅在 "),l("a",{href:"#createbuildapp"},"BuildApp"),n(" 中可用。")])],-1)),l("li",null,[s[26]||(s[26]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/advanced/architecture.html#%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B%E4%B8%8E-hooks"},{default:p(()=>s[25]||(s[25]=[n("深入 > 架构 > 核心流程与 Hooks",-1)])),_:1,__:[25]})])])])]),s[93]||(s[93]=o('<h3 id="dev" tabindex="-1"><a class="header-anchor" href="#dev"><span>dev</span></a></h3><ul><li>函数签名：</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">declare</span><span style="color:#569CD6;"> const</span><span style="color:#DCDCAA;"> dev</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">&lt;() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">void</span><span style="color:#D4D4D4;">&gt;&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',3)),l("ul",null,[s[30]||(s[30]=l("li",null,[l("p",null,"详情："),l("p",null,"启动开发服务器。"),l("p",null,[n("该方法仅在 "),l("a",{href:"#createdevapp"},"DevApp"),n(" 中可用。")])],-1)),l("li",null,[s[29]||(s[29]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/advanced/architecture.html#%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B%E4%B8%8E-hooks"},{default:p(()=>s[28]||(s[28]=[n("深入 > 架构 > 核心流程与 Hooks",-1)])),_:1,__:[28]})])])])]),s[94]||(s[94]=o(`<h2 id="page" tabindex="-1"><a class="header-anchor" href="#page"><span>Page</span></a></h2><h3 id="createpage" tabindex="-1"><a class="header-anchor" href="#createpage"><span>createPage</span></a></h3><ul><li>函数签名：</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> createPage</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">App</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">PageOptions</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Page</span><span style="color:#D4D4D4;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>参数：</li></ul><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>app</td><td><code>App</code></td><td>VuePress App 实例。</td></tr><tr><td>options</td><td><code>PageOptions</code></td><td>创建 VuePress Page 的选项。</td></tr></tbody></table><ul><li><p>详情：</p><p>创建一个 VuePress Page 对象。</p></li><li><p>示例：</p></li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createPage</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vuepress/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">  // 在 onInitialized hook 中创建一个额外页面</span></span>
<span class="line"><span style="color:#569CD6;">  async</span><span style="color:#DCDCAA;"> onInitialized</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">    app</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">pages</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#C586C0;">      await</span><span style="color:#DCDCAA;"> createPage</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#9CDCFE;">        path:</span><span style="color:#CE9178;"> &#39;/foo.html&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">        frontmatter:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">          layout:</span><span style="color:#CE9178;"> &#39;Layout&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">        },</span></span>
<span class="line"><span style="color:#9CDCFE;">        content:</span><span style="color:#CE9178;"> \`</span><span style="color:#D7BA7D;">\\</span></span>
<span class="line"><span style="color:#CE9178;"># 某个 Page</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CE9178;">你好，世界。</span></span>
<span class="line"><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">      }),</span></span>
<span class="line"><span style="color:#D4D4D4;">    )</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)),l("ul",null,[l("li",null,[s[33]||(s[33]=n("参考： ",-1)),l("ul",null,[s[32]||(s[32]=l("li",null,[l("a",{href:"#pages"},"Node API > App 属性 > pages")],-1)),l("li",null,[e(a,{to:"/zh/advanced/cookbook/adding-extra-pages.html"},{default:p(()=>s[31]||(s[31]=[n("Cookbook > 添加额外页面",-1)])),_:1,__:[31]})])])])]),s[95]||(s[95]=l("h2",{id:"page-属性",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#page-属性"},[l("span",null,"Page 属性")])],-1)),s[96]||(s[96]=l("h3",{id:"path",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#path"},[l("span",null,"path")])],-1)),l("ul",null,[s[37]||(s[37]=l("li",null,[l("p",null,[n("类型： "),l("code",null,"string")])],-1)),s[38]||(s[38]=l("li",null,[l("p",null,"详情："),l("p",null,"该 Page 的路由路径。")],-1)),l("li",null,[s[36]||(s[36]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/guide/page.html#%E8%B7%AF%E7%94%B1"},{default:p(()=>s[34]||(s[34]=[n("指南 > 页面 > 路由",-1)])),_:1,__:[34]})]),s[35]||(s[35]=l("li",null,[l("a",{href:"#pathinferred"},"Node API > Page 属性 > pathInferred")],-1))])])]),s[97]||(s[97]=l("h3",{id:"title",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#title"},[l("span",null,"title")])],-1)),l("ul",null,[s[41]||(s[41]=l("li",null,[l("p",null,[n("类型： "),l("code",null,"string")])],-1)),s[42]||(s[42]=l("li",null,[l("p",null,"详情："),l("p",null,"该 Page 的标题。")],-1)),l("li",null,[s[40]||(s[40]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/reference/frontmatter.html#title"},{default:p(()=>s[39]||(s[39]=[n("Frontmatter > title",-1)])),_:1,__:[39]})])])])]),s[98]||(s[98]=l("h3",{id:"lang",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#lang"},[l("span",null,"lang")])],-1)),l("ul",null,[s[45]||(s[45]=o("<li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>该 Page 的语言。</p></li><li><p>示例：</p><ul><li><code>&#39;en-US&#39;</code></li><li><code>&#39;zh-CN&#39;</code></li></ul></li>",3)),l("li",null,[s[44]||(s[44]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/reference/frontmatter.html#title"},{default:p(()=>s[43]||(s[43]=[n("Frontmatter > lang",-1)])),_:1,__:[43]})])])])]),s[99]||(s[99]=l("h3",{id:"frontmatter",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#frontmatter"},[l("span",null,"frontmatter")])],-1)),l("ul",null,[s[48]||(s[48]=l("li",null,[l("p",null,[n("类型： "),l("code",null,"PageFrontmatter")])],-1)),s[49]||(s[49]=l("li",null,[l("p",null,"详情："),l("p",null,"该 Page 的 Frontmatter 。")],-1)),l("li",null,[s[47]||(s[47]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/reference/frontmatter.html"},{default:p(()=>s[46]||(s[46]=[n("Frontmatter",-1)])),_:1,__:[46]})])])])]),s[100]||(s[100]=o(`<h3 id="headers" tabindex="-1"><a class="header-anchor" href="#headers"><span>headers</span></a></h3><ul><li>类型： <code>PageHeader[]</code></li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> PageHeader</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  level</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span>
<span class="line"><span style="color:#9CDCFE;">  title</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#9CDCFE;">  slug</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#9CDCFE;">  children</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">PageHeader</span><span style="color:#D4D4D4;">[]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),l("ul",null,[s[52]||(s[52]=l("li",null,[l("p",null,"详情："),l("p",null,"该 Page 的小标题。")],-1)),l("li",null,[s[51]||(s[51]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/reference/config.html#markdown-headers"},{default:p(()=>s[50]||(s[50]=[n("配置 > markdown.headers",-1)])),_:1,__:[50]})])])])]),s[101]||(s[101]=o(`<h3 id="data" tabindex="-1"><a class="header-anchor" href="#data"><span>data</span></a></h3><ul><li>类型： <code>PageData</code></li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> PageData</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  path</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#9CDCFE;">  title</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#9CDCFE;">  lang</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#9CDCFE;">  frontmatter</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">PageFrontmatter</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),l("ul",null,[s[56]||(s[56]=l("li",null,[l("p",null,"详情："),l("p",null,"该 Page 的数据。"),l("p",null,"Page 数据可以在客户端代码中使用。")],-1)),l("li",null,[s[55]||(s[55]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/reference/client-api.html#usepagedata"},{default:p(()=>s[53]||(s[53]=[n("客户端 API > usePageData",-1)])),_:1,__:[53]})]),l("li",null,[e(a,{to:"/zh/reference/plugin-api.html#extendspage"},{default:p(()=>s[54]||(s[54]=[n("插件 API > extendsPage",-1)])),_:1,__:[54]})])])])]),s[102]||(s[102]=o('<h3 id="content" tabindex="-1"><a class="header-anchor" href="#content"><span>content</span></a></h3><ul><li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>该 Page 的未经渲染的原始内容。</p></li></ul><h3 id="contentrendered" tabindex="-1"><a class="header-anchor" href="#contentrendered"><span>contentRendered</span></a></h3><ul><li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>该 Page 的渲染后的内容。</p></li></ul><h3 id="date" tabindex="-1"><a class="header-anchor" href="#date"><span>date</span></a></h3>',5)),l("ul",null,[s[59]||(s[59]=o("<li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>该 Page 的日期，遵从 &#39;yyyy-MM-dd&#39; 格式。</p></li><li><p>示例：</p><ul><li><code>&#39;0000-00-00&#39;</code></li><li><code>&#39;2021-08-16</code>&#39;</li></ul></li>",3)),l("li",null,[s[58]||(s[58]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/reference/frontmatter.html#date"},{default:p(()=>s[57]||(s[57]=[n("Frontmatter > date",-1)])),_:1,__:[57]})])])])]),s[103]||(s[103]=l("h3",{id:"deps",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#deps"},[l("span",null,"deps")])],-1)),l("ul",null,[s[62]||(s[62]=l("li",null,[l("p",null,[n("类型： "),l("code",null,"string[]")])],-1)),s[63]||(s[63]=l("li",null,[l("p",null,"详情："),l("p",null,"该 Page 的依赖。"),l("p",null,[n("举例来说，如果在页面中导入了代码片段，那么被导入文件的绝对路径就会被添加到 "),l("code",null,"deps"),n(" 中。")])],-1)),l("li",null,[s[61]||(s[61]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/reference/config.html#markdown-importcode"},{default:p(()=>s[60]||(s[60]=[n("配置 > markdown.importCode",-1)])),_:1,__:[60]})])])])]),s[104]||(s[104]=o(`<h3 id="links" tabindex="-1"><a class="header-anchor" href="#links"><span>links</span></a></h3><ul><li>类型： <code>MarkdownLink[]</code></li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#4EC9B0;"> MarkdownLink</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  raw</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#9CDCFE;">  relative</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#9CDCFE;">  absolute</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>详情：</p><p>该 Page 内容中包含的链接。</p></li></ul><h3 id="markdownenv" tabindex="-1"><a class="header-anchor" href="#markdownenv"><span>markdownEnv</span></a></h3><ul><li><p>类型： <code>Record&lt;string, unknown&gt;</code></p></li><li><p>详情：</p><p>在使用 markdown-it 解析 Markdown 内容时的 <code>env</code> 对象。</p><p>一些 markdown-it 插件可能会在这个对象中存储一些额外的信息，你可以使用它们来进行高级定制化。</p><p>需要注意的是，其他的一些 Page 属性其实也是从 <code>env</code> 对象中获取到的，但是我们已经把这些属性从 <code>page.markdownEnv</code> 中移除掉了。</p></li><li><p>参考：</p><ul><li><a href="https://markdown-it.github.io/markdown-it/#MarkdownIt.parse" target="_blank" rel="noopener noreferrer">markdown-it &gt; API Documentation &gt; MarkdownIt &gt; parse</a></li></ul></li></ul><h3 id="pathinferred" tabindex="-1"><a class="header-anchor" href="#pathinferred"><span>pathInferred</span></a></h3>`,7)),l("ul",null,[s[67]||(s[67]=o('<li><p>类型： <code>string | null</code></p></li><li><p>详情：</p><p>该 Page 根据文件路径推断出的路由路径。</p><p>默认情况下，路由路径是根据 Markdown 源文件的相对文件路径推断出来的。然而，用户可能会显式指定页面路由，比如通过 <a href="#permalink">permalink</a> 来指定该页面最终使用的路由路径。因此我们在 Page 属性中保留推断出来的路径，以便于你在某些情况下可能会用到它。</p><p>如果该 Page 不是来自于 Markdown 源文件，那么该属性会为 <code>null</code> 。</p></li><li><p>示例：</p><ul><li><code>&#39;/&#39;</code></li><li><code>&#39;/foo.html&#39;</code></li></ul></li>',3)),l("li",null,[s[66]||(s[66]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/guide/page.html#%E8%B7%AF%E7%94%B1"},{default:p(()=>s[64]||(s[64]=[n("指南 > 页面 > 路由",-1)])),_:1,__:[64]})]),s[65]||(s[65]=l("li",null,[l("a",{href:"#path"},"Node API > Page 属性 > path")],-1))])])]),s[105]||(s[105]=l("h3",{id:"pathlocale",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#pathlocale"},[l("span",null,"pathLocale")])],-1)),l("ul",null,[s[70]||(s[70]=o("<li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>该 Page 路由路径的 Locale 前缀。</p><p>它是根据页面的 Markdown 源文件相对路径、以及用户配置的 <code>locales</code> 的键推断得到的。</p></li><li><p>示例：</p><ul><li><code>&#39;/&#39;</code></li><li><code>&#39;/en/&#39;</code></li><li><code>&#39;/zh/&#39;</code></li></ul></li>",3)),l("li",null,[s[69]||(s[69]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/reference/config.html#locales"},{default:p(()=>s[68]||(s[68]=[n("配置 > locales",-1)])),_:1,__:[68]})])])])]),s[106]||(s[106]=l("h3",{id:"permalink",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#permalink"},[l("span",null,"permalink")])],-1)),l("ul",null,[s[74]||(s[74]=l("li",null,[l("p",null,[n("类型： "),l("code",null,"string | null")])],-1)),s[75]||(s[75]=l("li",null,[l("p",null,"详情："),l("p",null,"该 Page 的永久链接。")],-1)),l("li",null,[s[73]||(s[73]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/reference/frontmatter.html#permalink"},{default:p(()=>s[71]||(s[71]=[n("Frontmatter > permalink",-1)])),_:1,__:[71]})]),l("li",null,[e(a,{to:"/zh/reference/frontmatter.html#permalinkpattern"},{default:p(()=>s[72]||(s[72]=[n("Frontmatter > permalinkPattern",-1)])),_:1,__:[72]})])])])]),s[107]||(s[107]=l("h3",{id:"routemeta",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#routemeta"},[l("span",null,"routeMeta")])],-1)),l("ul",null,[s[78]||(s[78]=l("li",null,[l("p",null,[n("类型： "),l("code",null,"Record<string, unknown>")])],-1)),s[79]||(s[79]=l("li",null,[l("p",null,"详情："),l("p",null,"附加到页面路由记录上的额外数据。")],-1)),l("li",null,[s[77]||(s[77]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/reference/frontmatter.html#routemeta"},{default:p(()=>s[76]||(s[76]=[n("Frontmatter > routeMeta",-1)])),_:1,__:[76]})])])])]),s[108]||(s[108]=o('<div class="hint-container tip"><p class="hint-container-title">Route Meta 和 Page Data 的区别是什么？</p><p><a href="#routemeta">Route Meta</a> 和 <a href="#data">Page Data</a> 都可以在客户端代码中使用。然而， Route Meta 是附加在页面路由记录上的，因此当用户进入你的站点时，所有页面的 Route Meta 都会立即被加载。相比之下， Page Data 是存储在单独的文件中的，只有在用户进入对应页面时才会被加载。</p><p>因此，不建议在 Route Meta 中存储大量的信息，否则在站点有很多页面时，将会影响站点的初始加载速度。</p></div><h3 id="sfcblocks" tabindex="-1"><a class="header-anchor" href="#sfcblocks"><span>sfcBlocks</span></a></h3>',2)),l("ul",null,[s[82]||(s[82]=l("li",null,[l("p",null,[n("类型： "),l("code",null,"MarkdownSfcBlocks")])],-1)),s[83]||(s[83]=l("li",null,[l("p",null,"详情："),l("p",null,"该 Page 中提取出的 Vue SFC Blocks 。")],-1)),l("li",null,[s[81]||(s[81]=l("p",null,"参考：",-1)),l("ul",null,[l("li",null,[e(a,{to:"/zh/reference/config.html#markdown-sfc"},{default:p(()=>s[80]||(s[80]=[n("配置 > markdown.sfc",-1)])),_:1,__:[80]})])])])]),s[109]||(s[109]=o('<h3 id="slug" tabindex="-1"><a class="header-anchor" href="#slug"><span>slug</span></a></h3><ul><li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>该 Page 的 Slug 。</p><p>它是根据页面的 Markdown 源文件的文件名推断得到的。</p></li></ul><h3 id="filepath" tabindex="-1"><a class="header-anchor" href="#filepath"><span>filePath</span></a></h3><ul><li><p>类型： <code>string | null</code></p></li><li><p>详情：</p><p>该 Page 的 Markdown 源文件的绝对路径。</p><p>如果该 Page 不是来自于 Markdown 源文件，那么该属性会为 <code>null</code> 。</p></li></ul><h3 id="filepathrelative" tabindex="-1"><a class="header-anchor" href="#filepathrelative"><span>filePathRelative</span></a></h3><ul><li><p>类型： <code>string | null</code></p></li><li><p>详情：</p><p>该 Page 的 Markdown 源文件的相对路径。</p><p>如果该 Page 不是来自于 Markdown 源文件，那么该属性会为 <code>null</code> 。</p></li></ul>',6))])}const m=t(c,[["render",u]]),v=JSON.parse('{"path":"/zh/reference/node-api.html","title":"Node API","lang":"zh-CN","frontmatter":{"description":"Node API Node API 可以通过 vuepress/core 来引入。 App 的所有 Hooks 中都可以获取到 App 实例。 BuildApp 和 DevApp 除了 build 和 dev 方法外，拥有一样的属性和方法。 createBuildApp 函数签名： 参数： 详情： 创建一个 Build 模式的 App 实例，用于构建静...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Node API\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-06T06:24:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://vuepress.vuejs.org/zh/reference/node-api.html"}],["meta",{"property":"og:site_name","content":"VuePress"}],["meta",{"property":"og:title","content":"Node API"}],["meta",{"property":"og:description","content":"Node API Node API 可以通过 vuepress/core 来引入。 App 的所有 Hooks 中都可以获取到 App 实例。 BuildApp 和 DevApp 除了 build 和 dev 方法外，拥有一样的属性和方法。 createBuildApp 函数签名： 参数： 详情： 创建一个 Build 模式的 App 实例，用于构建静..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-08-06T06:24:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-06T06:24:18.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://vuepress.vuejs.org/reference/node-api.html"}]]},"git":{"updatedTime":1754461458000,"contributors":[{"name":"meteorlxy","username":"meteorlxy","email":"meteor.lxy@foxmail.com","commits":9,"url":"https://github.com/meteorlxy"},{"name":"Mr.Hope","username":"","email":"mister-hope@outlook.com","commits":2},{"name":"Xinyu Liu","username":"","email":"meteor.lxy@foxmail.com","commits":1}],"changelog":[{"hash":"9883d65a35122f73ba019bbeb01fd679d3bdb486","time":1754461458000,"email":"meteor.lxy@foxmail.com","author":"meteorlxy","message":"style: fix lint and format errors"},{"hash":"5718e4d302e005fd9c6fb7f27684eef7f22ac7a0","time":1744265015000,"email":"meteor.lxy@foxmail.com","author":"meteorlxy","message":"docs: remove headers field from page data"},{"hash":"c50d39999bf77e769c24d46e37d3780fe48e621b","time":1725091193000,"email":"meteor.lxy@foxmail.com","author":"meteorlxy","message":"style: fix lint errors"},{"hash":"da95c8371e8b538d03aa20f53c472fc329929e97","time":1707234403000,"email":"meteor.lxy@foxmail.com","author":"meteorlxy","message":"docs: remove npm badges from core references"},{"hash":"9761a9b949c48d21fcc1bd73d96c103e73d03344","time":1707115253000,"email":"meteor.lxy@foxmail.com","author":"meteorlxy","message":"docs: update built-in components reference"},{"hash":"67a46e5a932c787baab1b752519edca76898bd4f","time":1706899209000,"email":"meteor.lxy@foxmail.com","author":"meteorlxy","message":"docs: revert meta to routeMeta"},{"hash":"d2696f74e3745eb1c7a3436dfbbf50cb506965f0","time":1706888813000,"email":"meteor.lxy@foxmail.com","author":"meteorlxy","message":"docs: rename routeMeta to meta and update description"},{"hash":"e0060b7ae2b023e2c41ab189b7c9c1b1bacecfa5","time":1706273295000,"email":"mister-hope@outlook.com","author":"Mr.Hope","message":"chore: fix imports"},{"hash":"d65303182f5d8861d9001bfd7681407a3900b050","time":1703740814000,"email":"meteor.lxy@foxmail.com","author":"meteorlxy","message":"docs: update imports usage"},{"hash":"7c7989891cb87959d90c82ce18c7a5bb650ee46b","time":1702213846000,"email":"mister-hope@outlook.com","author":"Mr.Hope","message":"build: set up lint and format scripts (#4)","coAuthors":[{"name":"Xinyu Liu","email":"meteor.lxy@foxmail.com"}]},{"hash":"4b4cfcd626bc3920c689cf7ac85e2706700cc928","time":1701614677000,"email":"meteor.lxy@foxmail.com","author":"meteorlxy","message":"build: migrate docs into a separate repo"}]},"autoDesc":true,"filePathRelative":"zh/reference/node-api.md"}');export{m as comp,v as data};
