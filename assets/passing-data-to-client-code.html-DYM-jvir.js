import{_ as p,c as i,b as e,a as o,d as n,e as l,w as t,r,o as c}from"./app-HXhn31Iy.js";const d={};function D(m,s){const a=r("RouteLink");return c(),i("div",null,[s[8]||(s[8]=e("h1",{id:"passing-data-to-client-code",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#passing-data-to-client-code"},[e("span",null,"Passing Data to Client Code")])],-1)),s[9]||(s[9]=e("p",null,"As we know, VuePress plugin entries and theme entries are processed in Node side, but sometimes you might need to pass data to client side. For example, you want to generate different data when users use different options.",-1)),s[10]||(s[10]=e("h2",{id:"use-define-hook",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#use-define-hook"},[e("span",null,[n("Use "),e("code",null,"define"),n(" Hook")])])],-1)),e("p",null,[s[1]||(s[1]=n("Plugin API provides a ",-1)),l(a,{to:"/reference/plugin-api.html#define"},{default:t(()=>s[0]||(s[0]=[n("define",-1)])),_:1,__:[0]}),s[2]||(s[2]=n(" hook to define global constants for client code. You can make use of it to pass data to client.",-1))]),s[11]||(s[11]=o(`<p>First, define some constants in <code>define</code> hook:</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  define:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    __FOO__:</span><span style="color:#9CDCFE;"> options</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> || </span><span style="color:#CE9178;">&#39;str&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    __OBJ__:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      bar:</span><span style="color:#9CDCFE;"> options</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;"> || </span><span style="color:#B5CEA8;">123</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then use them in client code directly:</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> foo</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">__FOO__</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> obj</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">__OBJ__</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>If you are using TypeScript in client code, you may need to declare the types of the global constants manually:</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">declare</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> __FOO__</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#569CD6;">declare</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> __OBJ__</span><span style="color:#D4D4D4;">: { </span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="write-and-load-temp-files" tabindex="-1"><a class="header-anchor" href="#write-and-load-temp-files"><span>Write and Load Temp Files</span></a></h2><p>If you need to achieve some more complex features, you can write temp files and load them dynamically in client code.</p>`,8)),e("p",null,[s[4]||(s[4]=n("First, write a temp file ",-1)),s[5]||(s[5]=e("code",null,"foo.js",-1)),s[6]||(s[6]=n(", which will be generated in the ",-1)),l(a,{to:"/reference/config.html#temp"},{default:t(()=>s[3]||(s[3]=[n("temp",-1)])),_:1,__:[3]}),s[7]||(s[7]=n(" directory:",-1))]),s[12]||(s[12]=o(`<div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#569CD6;">  async</span><span style="color:#DCDCAA;"> onPrepared</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;">    // write temp file</span></span>
<span class="line"><span style="color:#C586C0;">    await</span><span style="color:#9CDCFE;"> app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">writeTemp</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#CE9178;">      &#39;foo.js&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#CE9178;">      \`export const foo = </span><span style="color:#569CD6;">\${</span><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">stringify</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    )</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, load the temp file via <code>@temp</code> alias in client code:</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@temp/foo&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you are using TypeScript in client code, you may need to declare the type of the temp module manually:</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">declare</span><span style="color:#569CD6;"> module</span><span style="color:#CE9178;"> &#39;@temp/foo&#39;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> foo</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5))])}const y=p(d,[["render",D]]),C=JSON.parse('{"path":"/advanced/cookbook/passing-data-to-client-code.html","title":"Passing Data to Client Code","lang":"en-US","frontmatter":{"description":"Passing Data to Client Code As we know, VuePress plugin entries and theme entries are processed in Node side, but sometimes you might need to pass data to client side. For examp...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Passing Data to Client Code\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-10T13:10:46.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://vuepress.vuejs.org/advanced/cookbook/passing-data-to-client-code.html"}],["meta",{"property":"og:site_name","content":"VuePress"}],["meta",{"property":"og:title","content":"Passing Data to Client Code"}],["meta",{"property":"og:description","content":"Passing Data to Client Code As we know, VuePress plugin entries and theme entries are processed in Node side, but sometimes you might need to pass data to client side. For examp..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-10T13:10:46.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-10T13:10:46.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://vuepress.vuejs.org/zh/advanced/cookbook/passing-data-to-client-code.html"}]]},"git":{"updatedTime":1702213846000,"contributors":[{"name":"meteorlxy","username":"meteorlxy","email":"meteor.lxy@foxmail.com","commits":1,"url":"https://github.com/meteorlxy"},{"name":"Mr.Hope","username":"","email":"mister-hope@outlook.com","commits":1},{"name":"Xinyu Liu","username":"","email":"meteor.lxy@foxmail.com","commits":1}],"changelog":[{"hash":"7c7989891cb87959d90c82ce18c7a5bb650ee46b","time":1702213846000,"email":"mister-hope@outlook.com","author":"Mr.Hope","message":"build: set up lint and format scripts (#4)","coAuthors":[{"name":"Xinyu Liu","email":"meteor.lxy@foxmail.com"}]},{"hash":"4b4cfcd626bc3920c689cf7ac85e2706700cc928","time":1701614677000,"email":"meteor.lxy@foxmail.com","author":"meteorlxy","message":"build: migrate docs into a separate repo"}]},"autoDesc":true,"filePathRelative":"advanced/cookbook/passing-data-to-client-code.md"}');export{y as comp,C as data};
