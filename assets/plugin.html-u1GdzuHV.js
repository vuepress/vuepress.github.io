import{_ as i,c as r,b as e,a as o,d as n,e as a,w as t,r as p,o as u}from"./app-HXhn31Iy.js";const d={},c={class:"hint-container tip"};function m(g,s){const l=p("RouteLink");return u(),r("div",null,[s[28]||(s[28]=e("h1",{id:"writing-a-plugin",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#writing-a-plugin"},[e("span",null,"Writing a Plugin")])],-1)),e("div",c,[s[3]||(s[3]=e("p",{class:"hint-container-title"},"Tips",-1)),e("p",null,[s[1]||(s[1]=n("Before reading this guide, you'd better learn the VuePress ",-1)),a(l,{to:"/advanced/architecture.html"},{default:t(()=>s[0]||(s[0]=[n("architecture",-1)])),_:1,__:[0]}),s[2]||(s[2]=n(" first.",-1))])]),s[29]||(s[29]=e("h2",{id:"create-a-plugin",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#create-a-plugin"},[e("span",null,"Create a Plugin")])],-1)),e("p",null,[s[5]||(s[5]=n("A plugin should be a plain JavaScript object that satisfies the ",-1)),a(l,{to:"/reference/plugin-api.html"},{default:t(()=>s[4]||(s[4]=[n("Plugin API",-1)])),_:1,__:[4]}),s[6]||(s[6]=n(", which is called a ",-1)),s[7]||(s[7]=e("em",null,"Plugin Object",-1)),s[8]||(s[8]=n(":",-1))]),s[30]||(s[30]=o(`<div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> fooPlugin</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  name:</span><span style="color:#CE9178;"> &#39;vuepress-plugin-foo&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">  // ...</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),e("p",null,[s[10]||(s[10]=n("A plugin could also be a function that receives the ",-1)),a(l,{to:"/reference/node-api.html#app"},{default:t(()=>s[9]||(s[9]=[n("app instance",-1)])),_:1,__:[9]}),s[11]||(s[11]=n(" as the param and returns a ",-1)),s[12]||(s[12]=e("em",null,"Plugin Object",-1)),s[13]||(s[13]=n(", which is called a ",-1)),s[14]||(s[14]=e("em",null,"Plugin Function",-1)),s[15]||(s[15]=n(":",-1))]),s[31]||(s[31]=o(`<div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> barPlugin</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  name:</span><span style="color:#CE9178;"> &#39;vuepress-plugin-bar&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">  // ...</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A plugin usually needs to allow user options, so we typically provide users with a function to receive options, and returns a <em>Plugin Object</em> or a <em>Plugin Function</em>. Then your plugin should be converted like this:</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-ts"><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> fooPlugin</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  name:</span><span style="color:#CE9178;"> &#39;vuepress-plugin-foo&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">  // ...</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> barPlugin</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#9CDCFE;">  name:</span><span style="color:#CE9178;"> &#39;vuepress-plugin-bar&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">  // ...</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="publish-to-npm" tabindex="-1"><a class="header-anchor" href="#publish-to-npm"><span>Publish to NPM</span></a></h2><p>After creating a plugin, you should follow some conventions in the <a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json" target="_blank" rel="noopener noreferrer">package.json</a> file before publishing it to NPM:</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code class="language-json"><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#9CDCFE;">  &quot;name&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;vuepress-plugin-foo&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  &quot;keywords&quot;</span><span style="color:#D4D4D4;">: [</span><span style="color:#CE9178;">&quot;vuepress-plugin&quot;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),e("ul",null,[e("li",null,[s[17]||(s[17]=n("Set ",-1)),s[18]||(s[18]=e("code",null,"name",-1)),s[19]||(s[19]=n(" to follow the naming convention, i.e. ",-1)),s[20]||(s[20]=e("code",null,"vuepress-plugin-xxx",-1)),s[21]||(s[21]=n(" or ",-1)),s[22]||(s[22]=e("code",null,"@org/vuepress-plugin-xxx",-1)),s[23]||(s[23]=n(", which should be consistent with the ",-1)),a(l,{to:"/reference/plugin-api.html#name"},{default:t(()=>s[16]||(s[16]=[n("name",-1)])),_:1,__:[16]}),s[24]||(s[24]=n(" field of the ",-1)),s[25]||(s[25]=e("em",null,"Plugin Object",-1)),s[26]||(s[26]=n(".",-1))]),s[27]||(s[27]=e("li",null,[n("Set "),e("code",null,"keywords"),n(" to include "),e("code",null,"vuepress-plugin"),n(", so that users can search your plugin on NPM.")],-1))])])}const y=i(d,[["render",m]]),v=JSON.parse(`{"path":"/advanced/plugin.html","title":"Writing a Plugin","lang":"en-US","frontmatter":{"description":"Writing a Plugin Tips Before reading this guide, you'd better learn the VuePress first. Create a Plugin A plugin should be a plain JavaScript object that satisfies the , which i...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Writing a Plugin\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-31T07:59:53.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://vuepress.vuejs.org/advanced/plugin.html"}],["meta",{"property":"og:site_name","content":"VuePress"}],["meta",{"property":"og:title","content":"Writing a Plugin"}],["meta",{"property":"og:description","content":"Writing a Plugin Tips Before reading this guide, you'd better learn the VuePress first. Create a Plugin A plugin should be a plain JavaScript object that satisfies the , which i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-31T07:59:53.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-31T07:59:53.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://vuepress.vuejs.org/zh/advanced/plugin.html"}]]},"git":{"updatedTime":1725091193000,"contributors":[{"name":"meteorlxy","username":"meteorlxy","email":"meteor.lxy@foxmail.com","commits":2,"url":"https://github.com/meteorlxy"},{"name":"Mr.Hope","username":"","email":"mister-hope@outlook.com","commits":1},{"name":"Xinyu Liu","username":"","email":"meteor.lxy@foxmail.com","commits":1}],"changelog":[{"hash":"c50d39999bf77e769c24d46e37d3780fe48e621b","time":1725091193000,"email":"meteor.lxy@foxmail.com","author":"meteorlxy","message":"style: fix lint errors"},{"hash":"7c7989891cb87959d90c82ce18c7a5bb650ee46b","time":1702213846000,"email":"mister-hope@outlook.com","author":"Mr.Hope","message":"build: set up lint and format scripts (#4)","coAuthors":[{"name":"Xinyu Liu","email":"meteor.lxy@foxmail.com"}]},{"hash":"4b4cfcd626bc3920c689cf7ac85e2706700cc928","time":1701614677000,"email":"meteor.lxy@foxmail.com","author":"meteorlxy","message":"build: migrate docs into a separate repo"}]},"autoDesc":true,"filePathRelative":"advanced/plugin.md"}`);export{y as comp,v as data};
